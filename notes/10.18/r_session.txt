
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R version 3.5.1 (2018-07-02) -- Feather Spray
Type 'citation()', 'contributors()', or 'license()' for more information

Libraries:
* /home/nick/.config/R/library
* /usr/lib/R/library

> dogs = readRDS("data/dogs/dogs_full.rds")
> ggplot(dogs, aes(datadog, popularity)) + geom_point() +
.   geom_text(aes(label = breed))
Error in ggplot(dogs, aes(datadog, popularity)) : 
  could not find function "ggplot"
> library(ggplot2)
> ggplot(dogs, aes(datadog, popularity)) + geom_point() +
.   geom_text(aes(label = breed))
Warning: Removed 85 rows containing missing values (geom_point).
Warning: Removed 85 rows containing missing values (geom_text).
> # install.packages("ggrepel")
> library(ggrepel)
> ggplot(dogs, aes(datadog, popularity)) + geom_point() +
.   geom_text_repel(aes(label = breed))
Warning: Removed 85 rows containing missing values (geom_point).
Warning: Removed 85 rows containing missing values (geom_text_repel).
> mystery = readRDS("data/mystery/")
Warning in readRDS("data/mystery/") : error reading the file
Error in readRDS("data/mystery/") : error reading from connection
> mystery = readRDS("data/mystery/mystery.rds")
> head(mystery)
           x           y      narrow       wide
1  1.8196403  0.09780250  0.01672214  3.7422928
2 -0.6480038 -0.07264777 -0.01054774  2.9427050
3 -1.0632397 -0.73380164  0.43648649 -0.8557732
4  0.1416983  0.02965726 -0.80805366 -3.7705921
5  0.4511362  1.96306671 -0.06225165 -1.5613982
6  0.2257638  1.02197567 -0.54336647  0.5097513
> ggplot(mystery, aes(x, y)) + geom_point()
Warning: Removed 50 rows containing missing values (geom_point).
> ggplot(mystery, aes(x, y)) + geom_point(alpha = 0.5, size = 1)
Warning: Removed 50 rows containing missing values (geom_point).
> ggplot(mystery, aes(x, y)) + geom_point(alpha = 0.25, size = 1)
Warning: Removed 50 rows containing missing values (geom_point).
> ggplot(mystery, aes(x, y)) + geom_point() + geom_density2d()
Warning: Removed 50 rows containing non-finite values (stat_density2d).
Warning: Removed 50 rows containing missing values (geom_point).
> ggplot(mystery, aes(x, y)) + geom_point(alpha = 0.25, size = 0.5)
Warning: Removed 50 rows containing missing values (geom_point).
> ggplot(mystery, aes(x, y)) + geom_point(alpha = 0.25, size = 10)
Warning: Removed 50 rows containing missing values (geom_point).
> ggplot(mystery, aes(x, y)) + geom_point() + geom_density2d()
Warning: Removed 50 rows containing non-finite values (stat_density2d).
Warning: Removed 50 rows containing missing values (geom_point).
> head(mystery)
           x           y      narrow       wide
1  1.8196403  0.09780250  0.01672214  3.7422928
2 -0.6480038 -0.07264777 -0.01054774  2.9427050
3 -1.0632397 -0.73380164  0.43648649 -0.8557732
4  0.1416983  0.02965726 -0.80805366 -3.7705921
5  0.4511362  1.96306671 -0.06225165 -1.5613982
6  0.2257638  1.02197567 -0.54336647  0.5097513
> ggplot(mystery, aes(narrow, wide)) + geom_point()
> ggplot(mystery, aes(narrow, wide)) + geom_point() +
.   coord_fixed(ratio = 1)
> head(anscombe)
  x1 x2 x3 x4   y1   y2    y3   y4
1 10 10 10  8 8.04 9.14  7.46 6.58
2  8  8  8  8 6.95 8.14  6.77 5.76
3 13 13 13  8 7.58 8.74 12.74 7.71
4  9  9  9  8 8.81 8.77  7.11 8.84
5 11 11 11  8 8.33 9.26  7.81 8.47
6 14 14 14  8 9.96 8.10  8.84 7.04
> nrow(anscombe)
[1] 11
> cor(anscombe$x1, anscombe$y1)
[1] 0.8164205
> cor(anscombe$x2, anscombe$y2)
[1] 0.8162365
> cor(anscombe$x3, anscombe$y3)
[1] 0.8162867
> cor(anscombe$x4, anscombe$y4)
[1] 0.8165214
> lm(y1 ~ x1, anscombe)

Call:
lm(formula = y1 ~ x1, data = anscombe)

Coefficients:
(Intercept)           x1  
     3.0001       0.5001  

> lm(y2 ~ x2, anscombe)

Call:
lm(formula = y2 ~ x2, data = anscombe)

Coefficients:
(Intercept)           x2  
      3.001        0.500  

> lm(y3 ~ x3, anscombe)

Call:
lm(formula = y3 ~ x3, data = anscombe)

Coefficients:
(Intercept)           x3  
     3.0025       0.4997  

> lm(y4 ~ x4, anscombe)

Call:
lm(formula = y4 ~ x4, data = anscombe)

Coefficients:
(Intercept)           x4  
     3.0017       0.4999  

> ggplot(anscombe, aes(x1, y1)) + geom_point()
> ggplot(anscombe, aes(x2, y2)) + geom_point()
> g1 = ggplot(anscombe, aes(x1, y1)) + geom_point()
> g2 = ggplot(anscombe, aes(x2, y2)) + geom_point()
> library(gridExtra)
> g1 = ggplot(anscombe, aes(x1, y1)) + geom_point()
> g2 = ggplot(anscombe, aes(x2, y2)) + geom_point()
> grid.arrange(g1, g2)
> g1 = ggplot(anscombe, aes(x1, y1)) + geom_point()
> g2 = ggplot(anscombe, aes(x2, y2)) + geom_point()
> g3 = ggplot(anscombe, aes(x3, y3)) + geom_point()
> g4 = ggplot(anscombe, aes(x4, y4)) + geom_point()
> grid.arrange(g1, g2, g3, g4, ncol = 2, nrow = 2)
> # Simpson's Paradox
> simpson = readRDS("data/simpson/simpson_c.rds")
> head(simpson)
    weight     height group
1 11.53647   4.511791     A
2 18.03569   3.111502     B
3 22.67030  -2.909115     C
4 26.83387  -8.733842     D
5 33.23388 -11.748062     E
6 13.34308   9.109696     A
> cor(simpson$weight, simpson$height)
[1] -0.9260253
> by_group = split(simpson, simpson$group)
> class(by_group)
[1] "list"
> length(by_group)
[1] 5
> class(by_group[[1]])
[1] "data.frame"
> head(by_group[[1]])
     weight   height group
1  11.53647 4.511791     A
6  13.34308 9.109696     A
11 12.01740 6.102374     A
16 11.71010 6.692854     A
21 12.68148 7.410723     A
26 13.37947 9.191191     A
> head(by_group[[2]])
     weight    height group
2  18.03569 3.1115022     B
7  18.45033 2.4738798     B
12 17.20425 2.5597919     B
17 16.54344 0.3744375     B
22 17.67666 3.7022536     B
27 17.54449 0.7557756     B
> names(by_group)
[1] "A" "B" "C" "D" "E"
> by_group$A
      weight    height group
1   11.53647  4.511791     A
6   13.34308  9.109696     A
11  12.01740  6.102374     A
16  11.71010  6.692854     A
21  12.68148  7.410723     A
26  13.37947  9.191191     A
31  12.21741  5.113984     A
36  13.10480  6.071508     A
41  13.59708  9.156674     A
46  13.90159  9.027187     A
51  11.72828  4.327639     A
56  13.69325  8.165710     A
61  11.65831  5.210816     A
66  12.98393  8.797688     A
71  14.02899  9.000496     A
76  14.59562  9.072434     A
81  13.18760  7.358977     A
86  13.32737  9.531461     A
91  13.35143  9.092197     A
96  12.24107  6.704774     A
101 12.52504  5.054511     A
106 13.70798  9.832180     A
111 12.24984  6.589260     A
116 13.21426  6.835851     A
121 13.29728  7.316346     A
126 11.59030  6.443480     A
131 13.14585  7.745246     A
136 13.54763  9.006828     A
141 14.54434  8.635311     A
146 13.64592  9.520174     A
151 14.86084 10.324973     A
156 12.84631  7.754252     A
161 12.23015  4.781624     A
166 14.45916  8.436709     A
171 14.65251 10.927638     A
176 13.54827  8.261495     A
181 14.39716 10.371197     A
186 13.43513  8.027121     A
191 12.60295  6.790784     A
196 14.23433 10.957222     A
201 11.75623  4.382664     A
206 10.66223  3.435923     A
211 12.67651  7.653771     A
216 13.77363  8.373529     A
221 13.83150  9.541683     A
226 13.58484  8.520413     A
231 12.75731  8.170522     A
236 12.37628  5.409548     A
241 13.15751  7.160221     A
246 13.48476 10.014454     A
251 13.07402  8.811538     A
256 14.69673 12.754672     A
261 11.40520  3.970071     A
266 14.58648 12.587200     A
271 16.35829 12.806355     A
276 12.73080  4.966655     A
281 12.65482  8.015224     A
286 13.28123  8.734570     A
291 12.16989  6.398748     A
296 13.40357  6.127591     A
301 12.79280  6.739417     A
306 13.53211  7.968657     A
311 12.28418  5.336390     A
316 13.19328  9.149158     A
321 13.73084  8.779213     A
326 13.73148  8.416655     A
331 12.59167  7.170648     A
336 12.87440  6.913689     A
341 12.89455  8.520525     A
346 12.43166  4.150521     A
351 12.44327  6.767214     A
356 14.48371  9.614220     A
361 11.23799  5.976701     A
366 12.98290  6.181354     A
371 14.13023  9.902164     A
376 13.81618  7.384595     A
381 11.43735  5.407693     A
386 13.62140  8.572140     A
391 10.92038  6.027624     A
396 14.74967 10.633542     A
401 13.26519  7.811900     A
406 15.22998 11.689852     A
411 12.19866  7.467104     A
416 12.92128  7.045383     A
421 14.28782  7.686442     A
426 14.75765  7.722786     A
431 11.58920  5.157103     A
436 11.91917  7.711146     A
441 11.90818  6.102680     A
446 13.45169  6.879401     A
451 12.88956  7.724470     A
456 12.24150  6.282314     A
461 13.00629  5.529540     A
466 14.71558 11.095969     A
471 13.24784  8.911678     A
476 14.29914 10.263977     A
481 13.26790  6.638498     A
486 13.87278 10.029374     A
491 13.31762  8.838599     A
496 14.28259 10.568723     A
501 14.60965  9.326400     A
506 12.53689  6.658301     A
511 14.37686 11.304473     A
516 12.58247  5.746834     A
521 12.92305  8.388541     A
526 12.03107  7.412474     A
531 13.78196  9.257268     A
536 13.15365  8.524251     A
541 11.87844  4.597900     A
546 12.50402  8.421301     A
551 12.06345  6.733317     A
556 12.34405  7.393434     A
561 13.27025  9.608395     A
566 13.34343 10.302580     A
571 13.15279  8.517688     A
576 13.49729  8.154236     A
581 14.26791  9.735259     A
586 14.35330  9.576239     A
591 11.63099  7.117617     A
596 13.16921  9.177101     A
601 13.72782  8.470646     A
606 15.08680  9.801776     A
611 12.10865  5.871585     A
616 14.08792  8.976229     A
621 12.69682  7.593118     A
626 12.61284  8.653949     A
631 11.25732  5.770881     A
636 13.35251  9.586488     A
641 13.41373  8.199368     A
646 12.59572  6.052406     A
651 13.74457  8.479228     A
656 12.78416  7.504275     A
661 13.21416  8.375664     A
666 15.06616 10.772417     A
671 13.68258  9.109897     A
676 13.05225  8.748354     A
681 13.50401  9.344587     A
686 12.83130  6.895953     A
691 14.02336  9.749653     A
696 13.15278  7.236529     A
701 11.16527  5.428759     A
706 14.77475  9.261783     A
711 14.49450 12.065581     A
716 10.59300  3.986918     A
721 14.07644  9.718653     A
726 12.01857  6.169054     A
731 12.06344  6.590335     A
736 14.41768 10.919085     A
741 12.69140  8.928821     A
746 14.26296 10.225828     A
751 12.84163  8.331903     A
756 10.27968  3.250664     A
761 13.66388  8.500971     A
766 13.60721  8.994077     A
771 13.12694  7.074729     A
776 13.34945  9.157466     A
781 13.78358  9.288494     A
786 14.41130  9.931122     A
791 14.52737  8.952982     A
796 14.12043 10.873786     A
801 11.67569  6.749626     A
806 13.27734  8.112280     A
811 13.46828  7.657192     A
816 11.94935  5.727430     A
821 13.82617  9.906753     A
826 13.83593  7.760221     A
831 12.72334  7.136994     A
836 13.80992  6.961762     A
841 13.88006 10.416031     A
846 14.66349  9.929164     A
851 12.38704  7.888913     A
856 13.28167  7.948899     A
861 14.39880  9.497956     A
866 12.91441  7.235470     A
871 14.02927 10.121411     A
876 11.29935  4.307385     A
881 13.13862  7.127887     A
886 13.06597  7.783209     A
891 11.88037  5.262214     A
896 15.02771 10.079361     A
901 12.43946  7.247722     A
906 13.89493  9.516012     A
911 14.63030 11.373580     A
916 12.61193  6.896849     A
921 12.27078  5.692335     A
926 11.99232  7.445215     A
931 12.65918  7.756079     A
936 12.92728  6.896115     A
941 13.80336 10.650474     A
946 14.35538  8.613983     A
951 14.85651 10.736665     A
956 13.83715  7.792985     A
961 12.97221  6.587641     A
966 12.97490  8.451283     A
971 12.01699  5.941300     A
976 12.47073  6.627342     A
981 14.90328 10.653794     A
986 13.74640  9.707727     A
991 13.70742  6.918150     A
996 14.14253  9.244101     A
> cor(by_group$A$weight, by_group$A$height)
[1] 0.8456791
> cor(simpson$weight, simpson$height)
[1] -0.9260253
> cor(by_group$B$weight, by_group$B$height)
[1] 0.8125223
> ggplot(simpson, aes(weight, height, color = group)) + geom_point()
> ggplot(simpson, aes(weight, height)) + geom_point()
> by_group = split(simpson, simpson$group)
> sapply(by_group, mean)
Warning in mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
Warning in mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
Warning in mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
Warning in mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
Warning in mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
 A  B  C  D  E 
NA NA NA NA NA 
> simpson[[1]]
   [1] 11.53647 18.03569 22.67030 26.83387 33.23388 13.34308 18.45033
   [8] 22.68204 26.72083 32.30356 12.01740 17.20425 22.96137 26.50180
  [15] 34.12519 11.71010 16.54344 21.69392 27.77220 31.94917 12.68148
  [22] 17.67666 22.58080 26.85103 31.73009 13.37947 17.54449 23.35134
  [29] 29.86075 32.44191 12.21741 18.14167 23.13544 26.55218 32.41069
  [36] 13.10480 19.55427 23.57381 26.82662 34.33098 13.59708 16.44418
  [43] 22.73135 25.80070 32.53054 13.90159 18.95072 22.07897 27.11108
  [50] 31.68126 11.72828 17.87020 21.70232 27.46415 34.26892 13.69325
  [57] 19.42639 22.10314 26.81308 34.15598 11.65831 19.34419 22.86363
  [64] 27.93344 33.06839 12.98393 17.78712 21.54681 29.83696 31.85098
  [71] 14.02899 18.94482 24.38796 28.06640 32.11348 14.59562 19.32588
  [78] 24.08526 27.92729 31.71133 13.18760 16.98342 24.01573 29.41571
  [85] 32.66968 13.32737 17.04745 21.13894 27.97735 31.41780 13.35143
  [92] 18.96721 23.82580 26.79966 34.01949 12.24107 18.18670 20.76711
  [99] 26.85821 32.64277 12.52504 17.90177 23.57920 27.72428 33.37007
 [106] 13.70798 18.06670 22.94819 27.76370 32.05195 12.24984 18.28052
 [113] 23.14782 27.48439 35.39505 13.21426 19.59549 21.88124 29.07855
 [120] 32.65871 13.29728 18.20948 21.97524 28.68167 34.67470 11.59030
 [127] 17.21342 22.68446 29.74510 32.03827 13.14585 18.56818 25.12425
 [134] 27.86086 32.43373 13.54763 16.85125 23.57303 26.72560 32.29339
 [141] 14.54434 17.75940 22.10653 27.19825 33.23131 13.64592 18.70468
 [148] 24.82041 27.30512 33.41984 14.86084 19.28268 23.27918 28.46760
 [155] 33.42128 12.84631 16.64508 24.76867 28.52565 32.51077 12.23015
 [162] 18.45047 22.56902 27.08632 31.37232 14.45916 18.79662 22.37224
 [169] 29.17299 32.77588 14.65251 18.75651 23.37333 28.32795 33.55167
 [176] 13.54827 17.48944 23.69753 30.03727 32.34934 14.39716 17.58036
 [183] 22.75975 26.54975 34.12327 13.43513 16.83632 22.50012 26.23453
 [190] 34.39235 12.60295 16.55017 23.44871 29.38312 32.23745 14.23433
 [197] 17.60071 23.72415 29.20531 32.07013 11.75623 18.18088 23.70352
 [204] 26.67892 32.20806 10.66223 17.53352 23.99852 27.73193 32.23948
 [211] 12.67651 17.46424 23.20084 28.56419 33.56462 13.77363 17.04715
 [218] 24.20655 28.03721 33.32506 13.83150 17.55917 22.31706 27.82821
 [225] 33.36633 13.58484 18.12640 24.16309 27.87871 33.77010 12.75731
 [232] 18.20976 23.34817 28.48734 32.76119 12.37628 17.81093 22.91196
 [239] 28.35010 32.95699 13.15751 18.99680 25.19476 27.05647 32.90620
 [246] 13.48476 18.43629 23.15871 25.45409 34.09168 13.07402 17.30906
 [253] 22.04145 28.56971 33.40356 14.69673 16.83072 22.42431 27.23546
 [260] 33.08258 11.40520 17.79047 23.72910 26.52531 33.42295 14.58648
 [267] 19.19433 24.42053 29.20460 33.40983 16.35829 18.25665 21.87434
 [274] 27.20140 33.83447 12.73080 17.29350 22.95183 26.77423 30.88289
 [281] 12.65482 19.64636 22.98834 29.29761 32.31444 13.28123 17.48966
 [288] 21.99377 28.58966 31.36589 12.16989 17.54935 22.94128 27.08494
 [295] 35.23732 13.40357 19.86207 20.84959 28.28706 32.31823 12.79280
 [302] 17.97015 24.70714 28.17866 32.86116 13.53211 17.43380 23.03307
 [309] 26.20485 33.84280 12.28418 18.87801 24.56072 27.69202 33.29256
 [316] 13.19328 18.31330 23.07775 28.37445 32.13551 13.73084 19.21475
 [323] 21.43548 29.79604 32.75697 13.73148 17.31791 23.05389 27.71555
 [330] 33.99239 12.59167 18.57941 22.97713 27.87344 32.69737 12.87440
 [337] 19.07309 22.74544 26.37570 34.94224 12.89455 17.18952 22.77378
 [344] 27.40523 33.48805 12.43166 19.02300 24.35358 30.50582 33.05801
 [351] 12.44327 16.39925 24.77537 27.77827 32.79764 14.48371 18.46096
 [358] 22.80729 28.04545 32.69929 11.23799 18.51437 20.86064 28.29680
 [365] 33.22577 12.98290 18.51007 21.93144 28.33549 32.25099 14.13023
 [372] 19.70047 23.50424 28.56972 32.70223 13.81618 16.87998 23.67508
 [379] 28.44304 32.60621 11.43735 17.58387 24.13916 27.68767 31.86306
 [386] 13.62140 17.59227 22.20081 27.83492 32.40295 10.92038 19.95699
 [393] 22.20194 28.22483 34.17050 14.74967 19.56314 22.23344 29.16141
 [400] 31.22143 13.26519 16.88603 22.90153 27.98383 30.19963 15.22998
 [407] 18.23730 23.44405 28.14246 32.33436 12.19866 18.21458 23.71438
 [414] 27.96641 31.92820 12.92128 18.92062 21.58930 26.82224 32.82361
 [421] 14.28782 17.97592 23.07118 27.63822 33.95587 14.75765 18.18327
 [428] 23.34275 27.41589 33.85132 11.58920 19.04610 22.89673 29.56674
 [435] 32.81242 11.91917 16.44102 22.68629 25.54225 31.97449 11.90818
 [442] 18.18138 23.48269 28.59097 33.59252 13.45169 16.69412 24.89557
 [449] 27.94277 33.81210 12.88956 19.21917 22.47617 29.01276 31.53554
 [456] 12.24150 17.87936 23.06718 28.14553 31.27034 13.00629 19.84964
 [463] 24.09861 28.47472 31.41478 14.71558 17.05159 24.98878 28.26212
 [470] 33.15724 13.24784 18.38448 20.37002 27.48957 30.84838 14.29914
 [477] 18.67944 22.71421 28.95311 34.67506 13.26790 17.65016 23.87555
 [484] 27.36237 31.98520 13.87278 18.96648 23.60443 28.32787 31.28976
 [491] 13.31762 17.77904 25.39847 26.48249 33.22890 14.28259 18.07137
 [498] 24.84133 28.03944 34.34956 14.60965 17.17462 22.33406 26.14859
 [505] 33.12344 12.53689 19.12561 23.67755 27.10509 32.01932 14.37686
 [512] 16.74283 23.36687 27.55420 33.44865 12.58247 17.83859 22.13655
 [519] 26.62308 31.35244 12.92305 17.52207 22.96881 26.74274 33.71921
 [526] 12.03107 16.77895 21.41786 29.05371 33.30528 13.78196 19.79418
 [533] 23.74596 28.40435 32.65254 13.15365 18.10658 22.75126 29.50675
 [540] 34.84253 11.87844 19.40036 22.55769 28.02577 32.90996 12.50402
 [547] 17.55142 23.94773 28.79391 33.49923 12.06345 19.00322 21.59096
 [554] 26.49332 33.09670 12.34405 19.90732 24.47829 29.96523 32.33431
 [561] 13.27025 19.26550 22.64098 27.64564 34.04838 13.34343 17.53146
 [568] 22.34776 28.68282 35.37863 13.15279 18.16129 23.02771 29.77812
 [575] 33.46757 13.49729 16.56954 23.29682 26.88614 34.38447 14.26791
 [582] 17.63350 24.00243 28.92686 30.51364 14.35330 18.50874 21.81163
 [589] 27.36481 31.55006 11.63099 19.18286 22.51561 26.90694 32.53270
 [596] 13.16921 19.60428 22.26772 28.75971 31.76956 13.72782 18.50149
 [603] 22.92702 28.34524 31.93509 15.08680 16.88533 22.34684 28.68428
 [610] 34.60013 12.10865 18.99754 22.90260 28.15423 33.23424 14.08792
 [617] 17.44414 24.21570 26.43860 31.62421 12.69682 17.98651 23.25608
 [624] 28.21598 32.93133 12.61284 16.82658 23.08611 27.36381 33.72319
 [631] 11.25732 18.80972 22.11112 26.19443 33.13324 13.35251 17.19277
 [638] 22.12982 27.41290 31.56481 13.41373 18.03220 22.09745 28.43461
 [645] 33.53634 12.59572 18.41354 22.87791 26.10241 33.34086 13.74457
 [652] 19.18952 22.45495 28.10990 34.51910 12.78416 18.56623 23.48863
 [659] 28.27936 32.35944 13.21416 17.76995 22.80954 28.24862 31.80931
 [666] 15.06616 17.46088 23.91941 28.08071 32.50967 13.68258 19.26490
 [673] 23.67138 27.63337 33.11699 13.05225 17.75518 23.20348 29.54013
 [680] 33.19820 13.50401 19.10244 23.81701 28.09086 33.39594 12.83130
 [687] 17.46980 23.91686 29.08295 34.22435 14.02336 18.27807 22.76632
 [694] 27.67882 31.97561 13.15278 18.49858 23.22636 26.89655 34.15024
 [701] 11.16527 18.91384 23.41021 27.90572 32.51296 14.77475 16.59672
 [708] 24.12756 29.34263 32.94997 14.49450 16.97427 23.68661 25.49964
 [715] 32.43450 10.59300 17.85998 21.15291 28.80380 34.07099 14.07644
 [722] 17.86814 25.44648 27.78110 31.53402 12.01857 16.79692 21.44484
 [729] 28.88598 34.03328 12.06344 18.78837 22.46177 29.03178 30.75733
 [736] 14.41768 18.54618 24.23247 28.10268 33.86601 12.69140 18.57633
 [743] 21.78078 29.15849 33.97856 14.26296 18.03816 23.45020 27.53170
 [750] 35.26835 12.84163 17.11027 24.85245 27.16170 31.67039 10.27968
 [757] 18.75810 22.88935 28.01458 30.97322 13.66388 17.59034 23.33341
 [764] 30.14533 33.84583 13.60721 17.58948 22.11280 28.91608 33.92069
 [771] 13.12694 18.87724 21.85381 29.28818 33.23179 13.34945 17.98771
 [778] 22.87296 27.69694 34.48961 13.78358 16.83347 22.46755 27.70122
 [785] 35.73921 14.41130 18.04320 23.28065 28.48076 33.32298 14.52737
 [792] 17.87530 23.02781 26.42793 33.84104 14.12043 19.20236 21.93642
 [799] 28.48388 32.73601 11.67569 17.63500 23.63770 28.93834 30.41634
 [806] 13.27734 18.13132 24.76836 26.83943 32.64705 13.46828 17.49424
 [813] 21.07854 28.90177 33.00810 11.94935 17.79363 20.96194 28.20415
 [820] 31.93808 13.82617 16.36253 24.75876 27.31936 30.90341 13.83593
 [827] 19.03248 22.78853 27.71364 31.70811 12.72334 17.39828 23.51819
 [834] 29.34069 32.54400 13.80992 16.50853 22.28045 26.98341 33.30417
 [841] 13.88006 17.96633 22.76833 27.36436 34.15887 14.66349 15.90651
 [848] 21.87522 27.83282 32.92401 12.38704 17.50620 23.21576 28.81789
 [855] 31.94175 13.28167 17.31035 22.87632 28.31672 32.24109 14.39880
 [862] 15.37343 24.14386 27.22287 30.85048 12.91441 18.29377 24.62803
 [869] 28.20058 33.54427 14.02927 18.89315 23.06173 28.46046 34.32527
 [876] 11.29935 18.03005 21.32783 26.77050 34.93558 13.13862 16.99771
 [883] 24.44188 26.53181 33.41423 13.06597 17.59010 24.14993 26.98964
 [890] 33.29166 11.88037 17.96197 23.30674 28.00437 33.70707 15.02771
 [897] 19.18092 21.32898 26.66894 34.31852 12.43946 17.04801 23.03658
 [904] 27.46433 34.60512 13.89493 18.75895 23.50753 26.31986 32.73736
 [911] 14.63030 17.38841 24.19419 27.73662 32.48333 12.61193 17.79259
 [918] 22.08161 26.97592 34.51875 12.27078 17.89160 23.37848 27.67773
 [925] 35.39668 11.99232 18.56191 23.98476 30.30896 33.35546 12.65918
 [932] 17.85918 24.28991 29.83253 32.58423 12.92728 18.86517 22.56605
 [939] 29.01764 32.59491 13.80336 17.88987 23.13914 28.46879 32.86919
 [946] 14.35538 17.29424 21.48519 26.81435 33.76186 14.85651 16.75762
 [953] 22.71053 26.53003 33.24873 13.83715 18.06287 22.83767 28.32941
 [960] 31.38349 12.97221 18.14800 22.79958 28.74338 33.38448 12.97490
 [967] 18.65968 22.95577 28.52657 32.68514 12.01699 17.92664 22.99488
 [974] 28.45044 31.87316 12.47073 17.68441 22.76486 28.54715 32.74065
 [981] 14.90328 17.30634 23.17760 27.49085 33.40295 13.74640 16.91062
 [988] 24.67011 28.20523 32.46975 13.70742 17.89176 21.67958 27.37980
 [995] 34.16469 14.14253 19.67379 20.85967 28.20135 31.97358
> head(simpson[[1]])
[1] 11.53647 18.03569 22.67030 26.83387 33.23388 13.34308
> head(by_group[[1]])
     weight   height group
1  11.53647 4.511791     A
6  13.34308 9.109696     A
11 12.01740 6.102374     A
16 11.71010 6.692854     A
21 12.68148 7.410723     A
26 13.37947 9.191191     A
> by_group = split(simpson$height, simpson$group)
> head(by_group[[1]])
[1] 4.511791 9.109696 6.102374 6.692854 7.410723 9.191191
> names(by_group)
[1] "A" "B" "C" "D" "E"
> sapply(by_group, mean)
         A          B          C          D          E 
  8.015120   2.975222  -2.165869  -7.400234 -12.295853 
> # t stands for table (think table() function)
> tapply(simpson$height, simpson$group, mean)
         A          B          C          D          E 
  8.015120   2.975222  -2.165869  -7.400234 -12.295853 
> by_group = split(simpson$height, simpson$group)
> names(by_group)
[1] "A" "B" "C" "D" "E"
> match("A", names(by_group))
[1] 1
> index = match("A", names(by_group))
> x = c(1, 2, 3)
> x[-2]
[1] 1 3
> x = c(6, 7, 8)
> x[-2]
[1] 6 8
> index = match("A", names(by_group))
> index
[1] 1
> index = match("A", names(by_group))
> by_group = by_group[-index]
> names(by_group)
[1] "B" "C" "D" "E"
> index = match(c("A", "D"), names(by_group))
> index
[1] NA  3
> index = match(c("A", "D"), names(by_group))
> by_group = split(simpson$height, simpson$group)
> by_group = split(simpson$height, simpson$group)
> names(by_group)
[1] "A" "B" "C" "D" "E"
> index = match(c("A", "D"), names(by_group))
> index
[1] 1 4
> by_group = by_group[-index]
> names(by_group)
[1] "B" "C" "E"
> by_group = split(simpson, simpson$group)
> sapply(by_group, cor)
Error in FUN(X[[i]], ...) : 'x' must be numeric
> head(by_group[[1]])
     weight   height group
1  11.53647 4.511791     A
6  13.34308 9.109696     A
11 12.01740 6.102374     A
16 11.71010 6.692854     A
21 12.68148 7.410723     A
26 13.37947 9.191191     A
> by_group[[1]]
      weight    height group
1   11.53647  4.511791     A
6   13.34308  9.109696     A
11  12.01740  6.102374     A
16  11.71010  6.692854     A
21  12.68148  7.410723     A
26  13.37947  9.191191     A
31  12.21741  5.113984     A
36  13.10480  6.071508     A
41  13.59708  9.156674     A
46  13.90159  9.027187     A
51  11.72828  4.327639     A
56  13.69325  8.165710     A
61  11.65831  5.210816     A
66  12.98393  8.797688     A
71  14.02899  9.000496     A
76  14.59562  9.072434     A
81  13.18760  7.358977     A
86  13.32737  9.531461     A
91  13.35143  9.092197     A
96  12.24107  6.704774     A
101 12.52504  5.054511     A
106 13.70798  9.832180     A
111 12.24984  6.589260     A
116 13.21426  6.835851     A
121 13.29728  7.316346     A
126 11.59030  6.443480     A
131 13.14585  7.745246     A
136 13.54763  9.006828     A
141 14.54434  8.635311     A
146 13.64592  9.520174     A
151 14.86084 10.324973     A
156 12.84631  7.754252     A
161 12.23015  4.781624     A
166 14.45916  8.436709     A
171 14.65251 10.927638     A
176 13.54827  8.261495     A
181 14.39716 10.371197     A
186 13.43513  8.027121     A
191 12.60295  6.790784     A
196 14.23433 10.957222     A
201 11.75623  4.382664     A
206 10.66223  3.435923     A
211 12.67651  7.653771     A
216 13.77363  8.373529     A
221 13.83150  9.541683     A
226 13.58484  8.520413     A
231 12.75731  8.170522     A
236 12.37628  5.409548     A
241 13.15751  7.160221     A
246 13.48476 10.014454     A
251 13.07402  8.811538     A
256 14.69673 12.754672     A
261 11.40520  3.970071     A
266 14.58648 12.587200     A
271 16.35829 12.806355     A
276 12.73080  4.966655     A
281 12.65482  8.015224     A
286 13.28123  8.734570     A
291 12.16989  6.398748     A
296 13.40357  6.127591     A
301 12.79280  6.739417     A
306 13.53211  7.968657     A
311 12.28418  5.336390     A
316 13.19328  9.149158     A
321 13.73084  8.779213     A
326 13.73148  8.416655     A
331 12.59167  7.170648     A
336 12.87440  6.913689     A
341 12.89455  8.520525     A
346 12.43166  4.150521     A
351 12.44327  6.767214     A
356 14.48371  9.614220     A
361 11.23799  5.976701     A
366 12.98290  6.181354     A
371 14.13023  9.902164     A
376 13.81618  7.384595     A
381 11.43735  5.407693     A
386 13.62140  8.572140     A
391 10.92038  6.027624     A
396 14.74967 10.633542     A
401 13.26519  7.811900     A
406 15.22998 11.689852     A
411 12.19866  7.467104     A
416 12.92128  7.045383     A
421 14.28782  7.686442     A
426 14.75765  7.722786     A
431 11.58920  5.157103     A
436 11.91917  7.711146     A
441 11.90818  6.102680     A
446 13.45169  6.879401     A
451 12.88956  7.724470     A
456 12.24150  6.282314     A
461 13.00629  5.529540     A
466 14.71558 11.095969     A
471 13.24784  8.911678     A
476 14.29914 10.263977     A
481 13.26790  6.638498     A
486 13.87278 10.029374     A
491 13.31762  8.838599     A
496 14.28259 10.568723     A
501 14.60965  9.326400     A
506 12.53689  6.658301     A
511 14.37686 11.304473     A
516 12.58247  5.746834     A
521 12.92305  8.388541     A
526 12.03107  7.412474     A
531 13.78196  9.257268     A
536 13.15365  8.524251     A
541 11.87844  4.597900     A
546 12.50402  8.421301     A
551 12.06345  6.733317     A
556 12.34405  7.393434     A
561 13.27025  9.608395     A
566 13.34343 10.302580     A
571 13.15279  8.517688     A
576 13.49729  8.154236     A
581 14.26791  9.735259     A
586 14.35330  9.576239     A
591 11.63099  7.117617     A
596 13.16921  9.177101     A
601 13.72782  8.470646     A
606 15.08680  9.801776     A
611 12.10865  5.871585     A
616 14.08792  8.976229     A
621 12.69682  7.593118     A
626 12.61284  8.653949     A
631 11.25732  5.770881     A
636 13.35251  9.586488     A
641 13.41373  8.199368     A
646 12.59572  6.052406     A
651 13.74457  8.479228     A
656 12.78416  7.504275     A
661 13.21416  8.375664     A
666 15.06616 10.772417     A
671 13.68258  9.109897     A
676 13.05225  8.748354     A
681 13.50401  9.344587     A
686 12.83130  6.895953     A
691 14.02336  9.749653     A
696 13.15278  7.236529     A
701 11.16527  5.428759     A
706 14.77475  9.261783     A
711 14.49450 12.065581     A
716 10.59300  3.986918     A
721 14.07644  9.718653     A
726 12.01857  6.169054     A
731 12.06344  6.590335     A
736 14.41768 10.919085     A
741 12.69140  8.928821     A
746 14.26296 10.225828     A
751 12.84163  8.331903     A
756 10.27968  3.250664     A
761 13.66388  8.500971     A
766 13.60721  8.994077     A
771 13.12694  7.074729     A
776 13.34945  9.157466     A
781 13.78358  9.288494     A
786 14.41130  9.931122     A
791 14.52737  8.952982     A
796 14.12043 10.873786     A
801 11.67569  6.749626     A
806 13.27734  8.112280     A
811 13.46828  7.657192     A
816 11.94935  5.727430     A
821 13.82617  9.906753     A
826 13.83593  7.760221     A
831 12.72334  7.136994     A
836 13.80992  6.961762     A
841 13.88006 10.416031     A
846 14.66349  9.929164     A
851 12.38704  7.888913     A
856 13.28167  7.948899     A
861 14.39880  9.497956     A
866 12.91441  7.235470     A
871 14.02927 10.121411     A
876 11.29935  4.307385     A
881 13.13862  7.127887     A
886 13.06597  7.783209     A
891 11.88037  5.262214     A
896 15.02771 10.079361     A
901 12.43946  7.247722     A
906 13.89493  9.516012     A
911 14.63030 11.373580     A
916 12.61193  6.896849     A
921 12.27078  5.692335     A
926 11.99232  7.445215     A
931 12.65918  7.756079     A
936 12.92728  6.896115     A
941 13.80336 10.650474     A
946 14.35538  8.613983     A
951 14.85651 10.736665     A
956 13.83715  7.792985     A
961 12.97221  6.587641     A
966 12.97490  8.451283     A
971 12.01699  5.941300     A
976 12.47073  6.627342     A
981 14.90328 10.653794     A
986 13.74640  9.707727     A
991 13.70742  6.918150     A
996 14.14253  9.244101     A
> my_cor = function(x) {
.   # x will be one group
.   # x will look like a data frame in this case (see by_group[[1]])
.   
.   cor(x$weight, x$height)
. }
> sapply(by_group, my_cor)
        A         B         C         D         E 
0.8456791 0.8125223 0.8448661 0.8504958 0.8602332 
> cor(simpson$weight, simpson$height)
[1] -0.9260253
> cor(by_group$A$weight, by_group$A$height)
[1] 0.8456791
